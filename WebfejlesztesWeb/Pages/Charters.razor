@page "/charters"
@using System.Net.Http.Json
@using WebfejlesztesWeb.Data
@using WebfejlesztesWeb.Data.Dto
@inject CharterService CharterService

<PageTitle>Charters</PageTitle>

<h1 class="text-center my-4">Charters</h1>

<div class="container">
    @if (charters == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Departure</th>
                    <th>Arrival</th>
                    <th>Departure Time</th>
                    <th>Arrival Time</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var charter in charters)
                {
                    <tr>
                        <td>@charter.Id</td>
                        <td>@charter.Departure</td>
                        <td>@charter.Arrival</td>
                        <td>@charter.DepartureTime</td>
                        <td>@charter.ArrivalTime</td>
                        <td>
                            <button class="btn btn-sm btn-primary" @onclick="() => EditCharter(charter.Id)">Edit</button>
                            <button class="btn btn-sm btn-danger" @onclick="() => DeleteCharter(charter.Id)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <button class="btn btn-success" @onclick="CreateCharter">Create New Charter</button>
    }

    @if (isEditMode)
    {
        <div class="mt-4">
            <EditForm Model="currentCharter" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" />

                <div class="mb-3">
                    <label class="form-label">Departure:</label>
                    <InputText @bind-Value="currentCharter.Departure" class="form-control" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Arrival:</label>
                    <InputText @bind-Value="currentCharter.Arrival" class="form-control" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Departure Time:</label>
                    <InputDate @bind-Value="currentCharter.DepartureTime" class="form-control" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Arrival Time:</label>
                    <InputDate @bind-Value="currentCharter.ArrivalTime" class="form-control" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
                <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
            </EditForm>
        </div>
    }
</div>

@code {
    private List<CharterDto> charters;
    private CharterDto currentCharter = new CharterDto();
    private bool isEditMode = false;

    protected override async Task OnInitializedAsync()
    {
        charters = await CharterService.GetChartersAsync();
    }

    private void CreateCharter()
    {
        currentCharter = new CharterDto();
        isEditMode = true;
    }

    private async Task EditCharter(long id)
    {
        currentCharter = await CharterService.GetCharterByIdAsync(id);
        isEditMode = true;
    }

    private async Task HandleValidSubmit()
    {
        if (currentCharter.Id == 0)
        {
            await CharterService.CreateCharterAsync(currentCharter);
        }
        else
        {
            await CharterService.UpdateCharterAsync(currentCharter);
        }

        charters = await CharterService.GetChartersAsync();
        isEditMode = false;
    }

    private void CancelEdit()
    {
        isEditMode = false;
    }

    private async Task DeleteCharter(long id)
    {
        await CharterService.DeleteCharterAsync(id);
        charters = await CharterService.GetChartersAsync();
    }
}
